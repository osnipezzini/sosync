@inject IJSRuntime JsRuntime
@inject ILogger<MainLayout> Logger

@inherits LayoutComponentBase


<PageTitle>SOSync</PageTitle>
<MudThemeProvider @ref="_mudThemeProvider" IsDarkMode="_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
     </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">SOSync</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-1 pt-1">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async Task SetCulture()
    {
        try
        {
            var browserCulture = await JsRuntime.InvokeAsync<string>("browserJsFunctions.getLanguage");
            if (string.IsNullOrWhiteSpace(browserCulture))
                return;
            CultureInfo.CurrentCulture = CultureInfo.GetCultureInfo(browserCulture);
            CultureInfo.CurrentUICulture = CultureInfo.GetCultureInfo(browserCulture);
        }
        catch (Exception)
        {
            Logger.LogDebug("Não foi possível alterar a cultura!");
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await SetCulture();
            StateHasChanged();
        }
    }
}
<style>
    :root {
        --mud-palette-primary: #0a5e67;
    }
</style>